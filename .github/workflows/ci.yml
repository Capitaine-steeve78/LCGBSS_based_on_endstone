name: CI Manual

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type de build'
        required: true
        default: 'Release'
      os:
        description: 'Système d’exploitation'
        required: true
        default: 'ubuntu-22.04'

permissions: read-all

concurrency:
  group: manual-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build on ${{ github.event.inputs.os }} (${{ github.event.inputs.build_type }})
    runs-on: ${{ github.event.inputs.os }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: true

      - name: Cache Conan
        uses: actions/cache@v4
        with:
          path: ~/.conan2/p
          key: ${{ runner.os }}-conan-${{ github.event.inputs.build_type }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-conan-${{ github.event.inputs.build_type }}-

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Set up Clang (Linux)
        if: runner.os == 'Linux'
        env:
          LLVM_VERSION: 16
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential wget software-properties-common
          sudo wget https://apt.llvm.org/llvm.sh
          sudo chmod +x llvm.sh
          sudo ./llvm.sh ${LLVM_VERSION}
          sudo apt-get install -y libc++-${LLVM_VERSION}-dev libc++abi-${LLVM_VERSION}-dev
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${LLVM_VERSION} 200
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${LLVM_VERSION} 200
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Set up MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86_64

      - name: Set up CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Install and Configure Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan
          conan profile detect --force

      - name: Install Dependencies with Conan
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            conan install . --build=missing -s compiler.cppstd=20 -s build_type=${{ github.event.inputs.build_type }} -c tools.cmake.cmaketoolchain:generator=Ninja -s compiler.libcxx=libc++
          else
            conan install . --build=missing -s compiler.cppstd=20 -s build_type=${{ github.event.inputs.build_type }} -c tools.cmake.cmaketoolchain:generator=Ninja
          fi

      - name: Configure and Build with CMake
        run: |
          cmake -S . -B build/${{ github.event.inputs.build_type }} -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE="generators/conan_toolchain.cmake" \
            -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type }}
          cmake --build build/${{ github.event.inputs.build_type }}

      - name: Run Tests
        run: ctest --test-dir build/${{ github.event.inputs.build_type }}
