name: Compilation et Tests

on:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: manual-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build on ${{ matrix.os }} (Release)

    strategy:
      fail-fast: false
      matrix:
        os: [Windows, Linux]  # üëà simplifi√© pour nos runners self-hosted

    # ------------------------------
    # Runners self-hosted Windows et Linux
    # ------------------------------
    runs-on: ${{ 
      matrix.os == 'Windows' && fromJSON('["self-hosted", "Windows", "X64"]') || 
      matrix.os == 'Linux'   && fromJSON('["self-hosted", "linux", "x64"]') 
    }}

    steps:
      # ------------------------------
      # 1Ô∏è‚É£ R√©cup√©ration du code + sous-modules
      # ------------------------------
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Verify Detours submodule
        if: matrix.os == 'Windows'
        shell: bash
        run: |
          if [ ! -f "third_party/detours/src/creatwth.cpp" ]; then
            echo "‚ùå Le sous-module Detours n'est pas initialis√© correctement."
            echo "   Ex√©cutez : git submodule update --init --recursive"
            exit 1
          fi

      # ------------------------------
      # 2Ô∏è‚É£ Cache Conan
      # ------------------------------
      - name: Cache Conan
        uses: actions/cache@v4
        with:
          path: ~/.conan2/p
          key: ${{ runner.os }}-conan-Release-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-conan-Release-

      # ------------------------------
      # 3Ô∏è‚É£ Set up Python
      # ------------------------------
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'

      # ------------------------------
      # 4Ô∏è‚É£ Configuration de l‚Äôenvironnement
      # ------------------------------

      - name: Set up Clang (Linux)
        if: matrix.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential wget software-properties-common libunwind-dev ninja-build
          sudo wget https://apt.llvm.org/llvm.sh
          sudo chmod +x llvm.sh
          sudo ./llvm.sh 16
          sudo apt-get install -y libc++-16-dev libc++abi-16-dev
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 200
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-16 200
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      - name: Set up MSVC (Windows)
        if: matrix.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # ------------------------------
      # 5Ô∏è‚É£ Outils de build
      # ------------------------------
      - name: Set up CMake and Ninja
        uses: lukka/get-cmake@latest

      # ------------------------------
      # 6Ô∏è‚É£ Installer Conan et d√©tecter l‚Äôenvironnement
      # ------------------------------
      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan
          conan profile detect --force

      # ------------------------------
      # 7Ô∏è‚É£ Installation des d√©pendances
      # ------------------------------
      - name: Install Dependencies with Conan (Linux)
        if: matrix.os == 'Linux'
        shell: bash
        run: |
          conan install . \
            --build=missing \
            -s compiler.cppstd=20 \
            -s build_type=Release \
            -s compiler.libcxx=libc++ \
            -o cpptrace/*:unwind_with_nothing=True \
            --conf tools.cmake.cmaketoolchain:generator=Ninja \
            --conf tools.build:cxxflags="-DCPPTRACE_UNWIND_WITH_NOTHING"

      - name: Install Dependencies with Conan (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        run: |
          conan install . `
            --build=missing `
            -s compiler.cppstd=20 `
            -s build_type=Release `
            -o cpptrace/*:unwind_with_nothing=True

      # ------------------------------
      # 8Ô∏è‚É£ Compilation
      # ------------------------------
      - name: Configure and Build with CMake (Linux)
        if: matrix.os == 'Linux'
        shell: bash
        run: |
          cmake -S . -B build/Release -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=generators/conan_toolchain.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCPPTRACE_UNWIND_WITH_NOTHING=ON
          cmake --build build/Release --parallel

      - name: Configure and Build with CMake (Windows)
        if: matrix.os == 'Windows'
        shell: pwsh
        run: |
          $toolchain = Get-ChildItem -Recurse -Filter "conan_toolchain.cmake" | Select-Object -First 1
          if (-not $toolchain) { Write-Error "‚ùå conan_toolchain.cmake introuvable" -ErrorAction Stop }
          cmake -S . -B build/Release -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="$($toolchain.FullName)" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCPPTRACE_UNWIND_WITH_NOTHING=ON
          cmake --build build/Release --config Release

      # ------------------------------
      # 9Ô∏è‚É£ Tests
      # ------------------------------
      - name: Run Tests
        shell: bash
        run: ctest --test-dir build/Release --output-on-failure
        continue-on-error: true

      # ------------------------------
      # üîü Artifacts
      # ------------------------------
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-Release
          path: build/Release
