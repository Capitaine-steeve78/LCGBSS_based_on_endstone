name: Compilation et Tests

on:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: manual-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build on ${{ matrix.os }} (Release)
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: true

      - name: Cache Conan
        uses: actions/cache@v4
        with:
          path: ~/.conan2/p
          key: ${{ runner.os }}-conan-Release-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-conan-Release-

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'

      # ----------------- Linux -----------------
      - name: Set up Clang (Linux)
        if: matrix.os == 'ubuntu-22.04'
        env:
          LLVM_VERSION: 16
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential wget software-properties-common libunwind-dev libc6-dev ninja-build
          sudo wget https://apt.llvm.org/llvm.sh
          sudo chmod +x llvm.sh
          sudo ./llvm.sh ${LLVM_VERSION}
          sudo apt-get install -y libc++-${LLVM_VERSION}-dev libc++abi-${LLVM_VERSION}-dev
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${LLVM_VERSION} 200
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${LLVM_VERSION} 200
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV

      # ----------------- Windows -----------------
      - name: Set up MSVC (Windows)
        if: matrix.os == 'windows-2022'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # ----------------- CMake & Conan -----------------
      - name: Set up CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Install and Configure Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan
          conan profile detect --force

      - name: Install Dependencies with Conan
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            conan install . \
              --build=missing \
              -s compiler.cppstd=20 \
              -s build_type=Release \
              -s compiler.libcxx=libc++ \
              -o cpptrace/*:unwind_with_nothing=True \
              --conf tools.cmake.cmaketoolchain:generator=Ninja
          else
            conan install . \
              --build=missing \
              -s compiler.cppstd=20 \
              -s build_type=Release \
              -o cpptrace/*:unwind_with_nothing=True
          fi

      - name: Configure and Build with CMake
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            cmake -S . -B build/Release -G Ninja \
              -DCMAKE_TOOLCHAIN_FILE="generators/conan_toolchain.cmake" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCPPTRACE_UNWIND_WITH_NOTHING=ON
          else
            cmake -S . -B build/Release -G "Visual Studio 17 2022" \
              -A x64 \
              -DCMAKE_TOOLCHAIN_FILE="conan_toolchain.cmake" \
              -DCMAKE_BUILD_TYPE=Release
          fi
          cmake --build build/Release --config Release

      - name: Run Tests
        run: ctest --test-dir build/Release --output-on-failure
        continue-on-error: true

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-Release
          path: build/Release
