name: build and test
on:
  workflow_dispatch:  # dÃ©clenchement manuel seulement

permissions: read-all

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        os: [ubuntu-22.04, windows-2022]
        include:
          - os: ubuntu-22.04
            build_type: Debug

    name: Build on ${{ matrix.os }} (${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: true

      - name: Cache Conan
        uses: actions/cache@v4
        with:
          path: ~/.conan2/p
          key: ${{ runner.os }}-conan-${{ matrix.build_type }}-${{ hashFiles('conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-conan-${{ matrix.build_type }}-

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Set up Clang (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y -q
          sudo apt-get install -y build-essential lsb-release wget software-properties-common python3-pip clang libc++-dev libc++abi-dev
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          python3 -m pip install --upgrade pip
          python3 -m pip install pybind11

      - name: Set up MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86_64

      - name: Set up CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Set up Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan
          conan profile detect --force

      - name: Install Dependencies with Conan
        run: |
          conan install . --build=missing -s compiler.cppstd=20 -s build_type=${{ matrix.build_type }} -c tools.cmake.cmaketoolchain:generator=Ninja

      - name: Build with CMake
        run: |
          mkdir -p build/${{ matrix.build_type }}
          cd build/${{ matrix.build_type }}
          cmake ../.. -G Ninja -DCMAKE_TOOLCHAIN_FILE="generators/conan_toolchain.cmake" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          cmake --build .

      - name: Run Tests
        run: ctest --test-dir build/${{ matrix.build_type }}
